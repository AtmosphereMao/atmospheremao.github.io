<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WePY小程序登录详解与配置</title>
      <link href="/2020/02/16/WePY%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/16/WePY%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95%E8%AF%A6%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="小程序登录-时序图"><a href="#小程序登录-时序图" class="headerlink" title="小程序登录 - 时序图"></a>小程序登录 - 时序图</h2><p><img src="https://cdn.learnku.com/uploads/images/201908/02/21633/4PBj7Tc4f1.jpeg!large" alt="image"><br>流程与OAuth2.0的<strong>授权码模式</strong>相似。</p><h3 id="OAuth2-0-基本处理流程"><a href="#OAuth2-0-基本处理流程" class="headerlink" title="OAuth2.0 基本处理流程"></a>OAuth2.0 基本处理流程</h3><ol><li>得到授权码code</li><li>获取access_token</li><li>通过access_token，获取OpenID</li><li>通过access_token及OpenID调用API，获取用户授权信息</li></ol><h3 id="微信小程序登录处理流程"><a href="#微信小程序登录处理流程" class="headerlink" title="微信小程序登录处理流程"></a>微信小程序登录处理流程</h3><ol><li>程序调用 wx.login() 接口获取临时登录凭证（code）（无需用户授权）</li><li>小程序提交 code 到服务器</li><li>服务器通过 appid、appsecret 和 code 请求微信接口，换取用户的 session_key 和 openid</li><li>服务器根据 openid 查找到对应的用户，存入 session_key ，然后为该用户生成 access_token （JWT）返回给小程序</li><li>用户拥有了 access_token ，小程序就可以调用需要身份认证的接口了</li></ol><h4 id="关于-session-key"><a href="#关于-session-key" class="headerlink" title="关于 session_key"></a>关于 session_key</h4><p>此处的 <strong>session_key</strong> 为存储在服务器中、用于获取<strong>用户信息</strong>等微信接口时所需的key。每次调用 <strong>wx.login()</strong> 之后，微信都会自动生成新的 <strong>session_key</strong> ，导致之前的 <strong>session_key</strong> 失效，所以在必要的时候 <strong>wx.login()</strong> ，而且还要及时保存 <strong>session_key</strong> 到服务器，以备后续使用。</p><h2 id="代码调试-配置（基于Laravel）"><a href="#代码调试-配置（基于Laravel）" class="headerlink" title="代码调试 配置（基于Laravel）"></a>代码调试 配置（基于Laravel）</h2><h3 id="EasyWeChat"><a href="#EasyWeChat" class="headerlink" title="EasyWeChat"></a>EasyWeChat</h3><p>回到 Laravel 项目中，我们需要调用微信的接口，加密解密微信接口数据，为了加快开发，使用 <a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">EasyWeChat</a> 进行开发，EasyWeChat已经封装好了微信相关的接口。</p><p>可以直接使用 EasyWeChat Laravel 5 的拓展包: overtrue/laravel-wechat。<br>安装引入拓展包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;Code&#x2F;LaravelProject</span><br><span class="line">$ composer require &quot;overtrue&#x2F;laravel-wechat:~4.0&quot;</span><br></pre></td></tr></table></figure><h3 id="Laravel-配置"><a href="#Laravel-配置" class="headerlink" title="Laravel 配置"></a>Laravel 配置</h3><p>发布配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan vendor:publish --provider&#x3D;&quot;Overtrue\LaravelWeChat\ServiceProvider&quot;</span><br></pre></td></tr></table></figure><p>修改配置文件，将小程序部分的注释打开：</p><p>config/wechat.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * 小程序</span><br><span class="line"> *&#x2F;</span><br><span class="line">&#39;mini_program&#39; &#x3D;&gt; [</span><br><span class="line">    &#39;default&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;app_id&#39;  &#x3D;&gt; env(&#39;WECHAT_MINI_PROGRAM_APPID&#39;, &#39;&#39;),</span><br><span class="line">        &#39;secret&#39;  &#x3D;&gt; env(&#39;WECHAT_MINI_PROGRAM_SECRET&#39;, &#39;&#39;),</span><br><span class="line">        &#39;token&#39;   &#x3D;&gt; env(&#39;WECHAT_MINI_PROGRAM_TOKEN&#39;, &#39;&#39;),</span><br><span class="line">        &#39;aes_key&#39; &#x3D;&gt; env(&#39;WECHAT_MINI_PROGRAM_AES_KEY&#39;, &#39;&#39;),</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>登录 <a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a>，获取小程序 <strong>AppID</strong> 和 <strong>AppSecret</strong></p><p>编辑 .env 配置文件，增加参数<strong>AppID</strong>、<strong>AppSecret</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 小程序</span><br><span class="line">WECHAT_MINI_PROGRAM_APPID&#x3D;wx756787de07****</span><br><span class="line">WECHAT_MINI_PROGRAM_SECRET&#x3D;bb28893cc9cdb3e0f*********</span><br></pre></td></tr></table></figure><h3 id="WePY-中-Promise-安装"><a href="#WePY-中-Promise-安装" class="headerlink" title="WePY 中 Promise 安装"></a>WePY 中 Promise 安装</h3><p>后面代码使用了<a href="https://note.youdao.com/" target="_blank" rel="noopener">Promise</a>对象。根据<a href="https://github.com/Tencent/wepy/wiki/wepy%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Promise" target="_blank" rel="noopener">wepy项目中使用Promise</a>。</p><p>在1.4.1以下版本，wepy生成的项目默认都会加入promise polyfill。</p><p>在1.4.1以后的版本，需要用户手动加入。</p><p>在WePY项目中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add promise-polyfill</span><br><span class="line">&#x2F;&#x2F; 在windws环境下要加上--no-bin-links</span><br><span class="line">&gt; yarn add promise-polyfill --no-bin-links</span><br></pre></td></tr></table></figure><p>增加 this.use(‘promisify’); 使 API promise 化：</p><p>src/app.wpy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">constructor () &#123;</span><br><span class="line">  super()</span><br><span class="line">  this.use(&#39;requestfix&#39;)</span><br><span class="line">  this.use(&#39;promisify&#39;)</span><br></pre></td></tr></table></figure><h3 id="小程序获取-Code"><a href="#小程序获取-Code" class="headerlink" title="小程序获取 Code"></a>小程序获取 Code</h3><p>在小程序中调用 wepy.login() 接口，获取 Code</p><p>src/app.wpy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onLaunch() &#123;</span><br><span class="line">  wepy.login().then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;login: &#39;, res)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们使用了 WePY 框架，所有小程序的接口都需要使用 wepy 对象调用，例如 <strong>wx.login()</strong> 就需要使用 <strong>wepy.login()</strong>。</p><p>进行编译，在微信开发者工具 - Console 则可以看到<strong>code</strong>信息。</p><h3 id="服务器获取-OpenID"><a href="#服务器获取-OpenID" class="headerlink" title="服务器获取 OpenID"></a>服务器获取 OpenID</h3><p>用 tinker 进行调试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;Code&#x2F;LaravelProject</span><br><span class="line">$ php artisan tinker</span><br><span class="line">&gt;&gt;&gt; $miniProgram &#x3D; \EasyWeChat::miniProgram();</span><br><span class="line">&gt;&gt;&gt; $miniProgram-&gt;auth-&gt;session(&#39;CODE&#39;); &#x2F;&#x2F; 此处CODE为WePY获取到的code</span><br></pre></td></tr></table></figure><h3 id="获取-UnionID"><a href="#获取-UnionID" class="headerlink" title="获取 UnionID"></a>获取 UnionID</h3><p>关于<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">UnionID</a></p><p>在以上返回信息如拥有UnionID情况，则无须用户再次授权：</p><ul><li>如果开发者帐号下存在同主体的公众号，并且该用户已经关注了该公众号。开发者可以直接通过 wx.login 获取到该用户 UnionID，无须用户再次授权。</li><li>如果开发者帐号下存在同主体的公众号或移动应用，并且该用户已经授权登录过该公众号或移动应用。开发者也可以直接通过 wx.login 获取到该用户 UnionID，无须用户再次授权。</li></ul><p>对于UnionID的限制条件：</p><ol><li>该小程序项目成立前，已有对应的网站，并且已拥有用户。</li><li>网站已有API，用户可通过账号或微信登录。</li></ol><h4 id="UnionID创建"><a href="#UnionID创建" class="headerlink" title="UnionID创建"></a>UnionID创建</h4><p><strong>UnionID的获取需服务号通过微信认证</strong></p><p>在<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">微信公众平台</a> - 开发 - 接口权限 - 网页授权获取用户基本信息 中设置回调页面域名，在用户授权同意给公众号后，会将该用户的unionID传入该域名。（正式公众号回调地址需为域名）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WePY初始化</title>
      <link href="/2020/02/16/WePY%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/02/16/WePY%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="WePY"><a href="#WePY" class="headerlink" title="WePY"></a>WePY</h2><p><a href="https://wepyjs.github.io/wepy-docs/" target="_blank" rel="noopener">WePY官方文档</a></p><h3 id="安装-wepy-cli"><a href="#安装-wepy-cli" class="headerlink" title="安装 wepy-cli"></a>安装 wepy-cli</h3><p>首先需要全局安装 wepy-cli：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yarn global add wepy-cli</span></span><br><span class="line">// 在windws环境下要加上--no-bin-links</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> yarn global add wepy-cli --no-bin-links</span></span><br></pre></td></tr></table></figure><p>安装成功，通过命令 <strong>wepy -v</strong> 可以查看到目前版本</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ wepy init standard .&#x2F;weapp_project</span><br><span class="line">? Yes &#x2F;&#x2F; 目标文件已存在，是否继续</span><br><span class="line">? weapp_project &#x2F;&#x2F; 填写你的项目名</span><br><span class="line">? wx63452****** &#x2F;&#x2F; 填写你的AppID</span><br><span class="line">? weapp laravel project &#x2F;&#x2F; 填写你的项目描述</span><br><span class="line">? AtmosphereMao@gmail.com &#x2F;&#x2F; 开发者</span><br><span class="line">? Yes &#x2F;&#x2F; 使用Eslint</span><br><span class="line">? Yes &#x2F;&#x2F; 使用Redux</span><br><span class="line">? Yes &#x2F;&#x2F; 使用Web转换功能</span><br></pre></td></tr></table></figure><h3 id="WePY-结构"><a href="#WePY-结构" class="headerlink" title="WePY 结构"></a>WePY 结构</h3><table><thead><tr><th>文件夹名称</th><th>类型</th><th>简介</th></tr></thead><tbody><tr><td>dist</td><td>目录</td><td>存放编译后的文件</td></tr><tr><td>src</td><td>目录</td><td>源码文件</td></tr><tr><td>src/app.wpy</td><td>目录</td><td>项目入口文件</td></tr><tr><td>src/pages</td><td>目录</td><td>存放小程序页面</td></tr><tr><td>src/components</td><td>目录</td><td>存放小程序组件</td></tr><tr><td>src/mixins</td><td>目录</td><td>存放 Mixin 文件</td></tr><tr><td>node_modules</td><td>目录</td><td>NPM 依赖模块</td></tr><tr><td>src/index.template.html</td><td>文件</td><td>模板页面 html</td></tr><tr><td>wepy.config.js</td><td>文件</td><td>全局配置文件</td></tr><tr><td>yarn.lock</td><td>文件</td><td>依赖列表，确保这个应用的副本使用相同版本的依赖</td></tr><tr><td>package.json</td><td>文件</td><td>项目的 package 配置</td></tr><tr><td>project.config.json</td><td>文件</td><td>开发者工具配置</td></tr><tr><td>.wepyignore</td><td>文件</td><td>WePY 忽略的文件</td></tr><tr><td>.wepycache</td><td>文件</td><td>WePY 缓存文件，防止在 build 时，重复 build npm 目录</td></tr><tr><td>.prettierrc</td><td>文件</td><td>prettier 配置文件</td></tr><tr><td>.eslintrc.js</td><td>文件</td><td>eslint 配置文件</td></tr><tr><td>.eslintignore</td><td>文件</td><td>eslint 忽略的文件</td></tr><tr><td>.editorconfig</td><td>文件</td><td>编辑器配置文件</td></tr></tbody></table><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>WePY 依赖于很多 node 包，接下来执行 yarn 安装这些包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yarn install</span><br><span class="line">&#x2F;&#x2F; 同上，windows需加--no-bin-links</span><br><span class="line">&gt; yarn install --no-bin-links</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>最后对项目进行编译，并持续监听代码变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wepy build --watch</span><br><span class="line">&#x2F;&#x2F; 如在homestead虚拟机环境下运行，会出现检测不到文件变化的情况</span><br><span class="line">or</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h3 id="微信开发者工具调试"><a href="#微信开发者工具调试" class="headerlink" title="微信开发者工具调试"></a>微信开发者工具调试</h3><p>经过编译，可在微信开发者工具上看到小程序界面，查看项目 <strong>详情</strong>：</p><p><strong>dist</strong> 目录就是编译好的文件目录，点击右上角的 详情，可以看到开发者工具已经适配好 WePY 框架</p><ul><li>默认将 ES6 转 ES5</li><li>上传代码时样式自动补全</li><li>代码上传时自动压缩 </li></ul><p>该三个选项关闭，这里一定不要勾选这三个选项，否则调试的时候会报错。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Laravel生产环境配置</title>
      <link href="/2020/02/05/Laravel%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/05/Laravel%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="允许使用的顶级域名"><a href="#允许使用的顶级域名" class="headerlink" title="允许使用的顶级域名"></a>允许使用的顶级域名</h3><h4 id="视图View设置"><a href="#视图View设置" class="headerlink" title="视图View设置"></a>视图View设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@if (app()-&gt;isLocal())</span><br><span class="line">    @include(&#39;sudosu::user-selector&#39;)</span><br><span class="line">@endif</span><br></pre></td></tr></table></figure><h4 id="Config设置"><a href="#Config设置" class="headerlink" title="Config设置"></a>Config设置</h4><p>config/sudosu.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return [</span><br><span class="line">    &#x2F;&#x2F; 允许使用的顶级域名</span><br><span class="line">    &#39;allowed_tlds&#39; &#x3D;&gt; [&#39;dev&#39;, &#39;local&#39;, &#39;test&#39;, &#39;app&#39;],</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 用户模型</span><br><span class="line">    &#39;user_model&#39; &#x3D;&gt; App\Models\User::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h4><p>生产环境中设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV&#x3D;local</span><br></pre></td></tr></table></figure><p>说明现在是本地环境，而不是生产环境。app ()-&gt;isLocal () 判断是本地环境才去注册 SudoSo。<br>日后产品上线了，可以在.env 里改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_ENV&#x3D;production</span><br></pre></td></tr></table></figure><p>这样 isLocal () 返回 false, 生产环境里就不会引入 SudoSo 了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Homestead搭建与配置</title>
      <link href="/2020/02/05/Homestead%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/05/Homestead%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>第一步，安装虚拟机VirtualBox</li><li>第二 步，下载vagrant</li><li>第三步，安装完毕vagrant之后，运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel&#x2F;homestead</span><br></pre></td></tr></table></figure>此步的下载会很慢，根据上面提示的地址，用迅雷或其他下载软件下载，保证下载不会被中断，下载完成后，用以下代码完成安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add laravel&#x2F;homestead homestead.box</span><br></pre></td></tr></table></figure>如使用该方法完成安装，则需要更改版本号（默认导入box版本号为0）</li></ul><p>打开<strong>C:\Users\M.vagrant.d\boxes</strong>，更改box里的版本号为对应的版本。</p><ul><li><p>第四步，把homestead克隆到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;laravel&#x2F;homestead.git ~&#x2F;Homestead</span><br></pre></td></tr></table></figure></li><li><p>此时我们举例homestead下载到了~/Homestead文件下面</p></li><li><p>第五步，创建<strong>Homestead.yaml</strong>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd  ~&#x2F;Homestead</span><br><span class="line">&#x2F;&#x2F; Mac &#x2F; Linux...</span><br><span class="line">bash init.sh</span><br><span class="line">&#x2F;&#x2F; Windows...</span><br><span class="line">init.bat</span><br></pre></td></tr></table></figure><p>此时会生成一个<strong>Homestead.yaml</strong>文件就是配置文件</p></li></ul><h2 id="Homestead-yaml-配置"><a href="#Homestead-yaml-配置" class="headerlink" title="Homestead.yaml 配置"></a>Homestead.yaml 配置</h2><ul><li>虚拟机设置</li></ul><p>Homestead 支持我们对虚拟机的IP，内存，CPU，虚拟机的默认提供者进行配置。这里我们基本不需要做任何配置，因此可以跳过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip: &quot;192.168.10.10&quot;</span><br><span class="line">memory: 2048</span><br><span class="line">cpus: 1</span><br><span class="line">provider: virtualbox</span><br></pre></td></tr></table></figure><ul><li>SSH 秘钥登录配置</li></ul><p>authorize 选项是指派登录虚拟机授权连接的公钥文件，此文件填写的是主机上的公钥文件地址，虚拟机初始化时，此文件里的内容会被复制存储到虚拟机的<br><strong>/home/vagrant/.ssh/authorized_keys</strong> 文件中，从而实现 SSH免密码登录。在这里我们默认填写即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authorize: ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>keys 是数组选项，填写的是本机的 SSH私钥文件地址。虚拟机初始化时，会将此处填写的所有 SSH 私钥文件复制到虚拟机的 <strong>/home/vagrant/.ssh/</strong> 文件夹中，从而使虚拟机能共享主机上的 SSH 私钥文件，使虚拟机具备等同于主机的身份认证。此功能为 SSH 授权提供了便利，例如在后面章节中，我们只需要在 GitHub 上配置一个 SSH 公钥，即可实现 GitHub 对虚拟机和主机共同认证。</p><p>此处我们将公钥和私钥一起同步到虚拟机中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keys:</span><br><span class="line">    - ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">    - ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>共享文件夹配置</li></ul><p>我们可以通过 folders 来指明本机要映射到 Homestead 虚拟机上的文件夹。</p><ol><li><strong>map</strong> 对应的是我们本机的文件夹，格式例如：E：/Homestead/Code，以开发者实际项目目录为准。</li><li><strong>to</strong> 对应的是 Homestead 上的文件夹。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">folders:</span><br><span class="line">    - map: ~&#x2F;Code</span><br><span class="line">      to: &#x2F;home&#x2F;vagrant&#x2F;Code</span><br></pre></td></tr></table></figure><ul><li>站点配置<br>站点配置允许你在主机里，通过域名来访问虚拟机里的 Laravel 应用。如下面 sites 配置所示，将 homestead.test 映射到一个 Laravel 项目的 public 目录上。这一行配置，会命令 Homestead 为我们新建一个 Nginx 站点，并且把 Web Root 配置到指定目录下。Laravel 应用的 Nginx 站点 Web Root 配置，默认就是在根目录下的 public 目录。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: homestead.test</span><br><span class="line">      to: &#x2F;home&#x2F;vagrant&#x2F;Code&#x2F;Laravel&#x2F;public</span><br></pre></td></tr></table></figure><p>此处的laravle文件并不存在，需要在对应创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;Code&#x2F;Laravel&#x2F;public</span><br></pre></td></tr></table></figure><p>根据上面站点地址，如需本地测试，则hosts也需要修改<br>C:\Windows\System32\Drivers\etc\hosts</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.10  homestead.test</span><br></pre></td></tr></table></figure><ul><li>数据库配置</li></ul><p>我们可以为 Homestead 指定数据库名称，这里使用默认设置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">databases:</span><br><span class="line">    - homestead</span><br></pre></td></tr></table></figure><ul><li>自定义变量</li></ul><p>最后，如果你需要自定义一些在虚拟机上可以使用的自定义变量，则可以在 <strong>variables</strong> 中进行定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variables:</span><br><span class="line">    - key: APP_ENV</span><br><span class="line">      value: local</span><br></pre></td></tr></table></figure><h3 id="运行-Vagrant"><a href="#运行-Vagrant" class="headerlink" title="运行 Vagrant"></a>运行 Vagrant</h3><p>完成了 Homestead 的配置，接下来我们要开始启动虚拟机了。</p><p>在命令中输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant</span><br></pre></td></tr></table></figure><p>能看到 Vagrant 为我们提供了一些便利的命令行，下面简单介绍一下 Vagrant 常用的一些命令行的使用：</p><table><thead><tr><th>命令行</th><th>说明</th></tr></thead><tbody><tr><td>vagrant init</td><td>初始化 vagrant</td></tr><tr><td>vagrant up</td><td>启动 vagrant</td></tr><tr><td>vagrant halt</td><td>关闭 vagrant</td></tr><tr><td>vagrant ssh</td><td>通过 SSH 登录 vagrant（需要先启动 vagrant）</td></tr><tr><td>vagrant provision</td><td>重新应用更改 vagrant 配置</td></tr><tr><td>vagrant destroy</td><td>删除 vagrant</td></tr></tbody></table><p>让我们开始启动 Homestead：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd ~&#x2F;Homestead &amp;&amp; vagrant up</span><br></pre></td></tr></table></figure><p>第一次启动时，Vagrant 会做以下这几件事情：</p><ol><li>以导入的 Homestead 虚拟机盒子为模板，新建一台虚拟机；</li><li>并按照 Homestead.yaml 里的配置信息，对这台新建的虚拟机进行配置；</li><li>配置完成后启动虚拟机。</li></ol><p>成功启动后，还是在 ~/Homestead 目录中，通过以下命令来 SSH 登录 Homestead 虚拟机中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vagrant ssh</span><br></pre></td></tr></table></figure><p>在虚拟机界面下可以输入退出虚拟机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br></pre></td></tr></table></figure><p>最后尝试关闭 Homestead：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vagrant halt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客创建成功</title>
      <link href="/2019/12/12/myfirstpost/"/>
      <url>/2019/12/12/myfirstpost/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的Blog，我的blog之后会记录生活乐趣与在编程生涯中遇到的各种问题。</p><p>请大家多多指教。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
